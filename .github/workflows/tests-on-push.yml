---

name: Tests on Push


on:
  push:
    branches-ignore:
      - main


jobs:
  build-docs:
    name: Build docs
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-exec-plugin
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
      # run tests
      - name: build docs
        run: poetry run mkdocs build --strict
      - name: check external links in docs
        run: |
          npm install -g markdown-link-validator
          poetry exec check-links
      - name: markdownlint
        run: docker run -v $PWD:/workdir ghcr.io/igorshubovych/markdownlint-cli:latest --config .markdownlint.yml --ignore CHANGELOG.md "**/*.md"

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-exec-plugin
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
      # run tests
      - name: Linting with Pylint
        run: poetry run pylint src test
      - name: Linting with mypy
        run: poetry run mypy .
      - name: Linting with black
        run: poetry run black --check .
      - name: Linting with isort
        run: poetry run isort . --check --diff
      - name: Linting with darglint
        run: poetry exec darglint

  unittests:
    name: Run Unittests
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-exec-plugin
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
      # run tests
      - name: unittests
        run: poetry run pytest test/unittests/

  benchmarking:
    name: Run Benchmarking
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-exec-plugin
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
      # run tests
      - name: benchmarking
        run: poetry run pytest -s test/benchmarking/


  cli-tests:
    name: Run CLI Test
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-exec-plugin
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
      # run tests
      - name: start stack
        run: poetry run dsp-tools start-stack --no-prune
      - name: e2e tests
        run: poetry run pytest test/e2e/test_cli.py
      - name: stop stack  # see if this command can run (it isn't tested anywhere else)
        run: poetry run dsp-tools stop-stack


  e2e-tests:
    name: Run E2E/Integration Tests
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-exec-plugin
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
      # Install programs for local processing (fast xmlupload)
      - name: Fast xmlupload - Install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Fast xmlupload - ImageMagick - look for cached AppImage
        # If a cache is found that matches "key", the cached files are restored to "path".
        # If no cache is found, this step is skipped, and when all jobs are done, the files in "path" are cached under "key".
        id: search-cached-imagemagick
        uses: actions/cache@v3
        with:
          path: ~/bin/magick        # AppImage containing all binaries + dependencies
          key: imagemagick          # don't check for a new version, because version checking is fairly complex
      - name: Fast xmlupload - ImageMagick - Installation
        if: ${{ steps.search-cached-imagemagick.outputs.cache-hit != 'true' }}
        uses: mfinelli/setup-imagemagick@v2  # downloads the "magick" AppImage to ~/bin/magick
      # run tests
      - name: start stack
        run: poetry run dsp-tools start-stack --no-prune
      - name: e2e tests
        run: poetry run pytest test/e2e/
      - name: stop stack  # see if this command can run (it isn't tested anywhere else)
        run: poetry run dsp-tools stop-stack
