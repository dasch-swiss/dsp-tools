---

name: Tests on Push


on:
  push:
    branches-ignore:
      - main


jobs:
  tests-on-push:
    runs-on: ubuntu-latest
    steps:

      # Checkout source, install Python, install dependencies
      ######################################################
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install poetry
        # the latest poetry (1.5.0) is not compatible with the latest poetry-exec-plugin (0.3.5) 
        # (see https://github.com/keattang/poetry-exec-plugin/issues/14). 
        # As long as poetry-exec-plugin isn't fixed, we have to use poetry 1.4.2.
        run: | 
          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          # attempt to restore dependencies from cache (if successful, the following `poetry install` will be a no-op)
          cache: poetry

      - name: Install Python dependencies
        run: poetry install
      

      # Build and check docs
      ######################
      - name: build docs
        run: poetry run mkdocs build --strict

      - name: check external links in docs
        run: |
          npm install -g markdown-link-validator
          poetry self add poetry-exec-plugin
          poetry exec check-links
      
      - name: markdownlint
        run: docker run -v $PWD:/workdir ghcr.io/igorshubovych/markdownlint-cli:latest --config .markdownlint.yml --ignore CHANGELOG.md "**/*.md"


      # Code Linting
      ##############
      - name: Linting with Pylint
        run: poetry run pylint src test

      - name: Linting with mypy
        run: poetry run mypy .

      - name: Linting with isort
        run: poetry run isort --check --diff --settings-path pyproject.toml .
      

      # Install programs for local processing (fast xmlupload)
      ########################################################
      - name: Fast xmlupload - Install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Fast xmlupload - ImageMagick - look for cached AppImage
        # If a cache is found that matches "key", the cached files are restored to "path".
        # If no cache is found, this step is skipped, and when all jobs are done, the files in "path" are cached under "key".
        id: search-cached-imagemagick
        uses: actions/cache@v3
        with:
          path: ~/bin/magick        # AppImage containing all binaries + dependencies
          key: imagemagick          # don't check for a new version, because version checking is fairly complex

      - name: Fast xmlupload - ImageMagick - Installation
        if: ${{ steps.search-cached-imagemagick.outputs.cache-hit != 'true' }}
        uses: mfinelli/setup-imagemagick@v2  # downloads the "magick" AppImage to ~/bin/magick


      # Run unittests and e2e tests
      #############################
      - name: unittests
        run: poetry run pytest test/unittests/

      - name: e2e tests
        run: |
          poetry run dsp-tools start-stack --no-prune
          poetry run pytest test/e2e/
          poetry run dsp-tools stop-stack           # see if this command can run (it isn't tested anywhere else)
