---

name: Tests on Push


on:
  push:
    branches-ignore:
      - main


jobs:
  tests-on-push:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies
        # the latest poetry (1.5.0) is not compatible with the latest poetry-exec-plugin (0.3.5) 
        # (see https://github.com/keattang/poetry-exec-plugin/issues/14). 
        # As long as poetry-exec-plugin isn't fixed, we have to use poetry 1.4.2.
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
          poetry self add poetry-exec-plugin
          poetry install
      
      - name: Install ffmpeg for local processing (fast xmlupload)
        uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg

      - name: Install ImageMagick for local processing (fast xmlupload)
        uses: mfinelli/setup-imagemagick@v2
      
      - name: build docs
        run: poetry run mkdocs build --strict

      - name: check external links in docs
        run: |
          npm install -g markdown-link-validator
          poetry exec check-links

      - name: run Pylint
        run: poetry run pylint src test

      - name: run mypy
        run: poetry run mypy .

      - name: Lint Code Base
        uses: github/super-linter/slim@v4           
        # GitHub's super-linter: https://github.com/github/super-linter
        # super-linter uses a pre-built image with all linters in it. Thus, the linters run outside the poetry virtualenv. 
        # So, pylint reports import-errors for dependencies installed with poetry.
        # In addition, pylint and mypy don't recognize the ignore patterns defined in pyproject.toml.
        # For these reasons, pylint and mypy must be run independently from super-linter.
        env:
          VALIDATE_ALL_CODEBASE: true               # check all files or only edited ones. if false, actions/checkout needs fetch-depth 0
          DEFAULT_BRANCH: main                      # name of the repository default branch; default: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # super-linter marks the status of each linter run in the Checks section of a PR
          FILTER_REGEX_EXCLUDE: CHANGELOG\.md       # CHANGELOG.md fails the markdownlint validation
          LINTER_RULES_PATH: /                      # directory for all linter configuration rules; default: .github/linters

          VALIDATE_BASH: true
          VALIDATE_DOCKERFILE_HADOLINT: true        # https://github.com/hadolint/hadolint
          VALIDATE_GITHUB_ACTIONS: true             # https://github.com/rhysd/actionlint
          VALIDATE_JSON: true                       # https://www.npmjs.com/package/eslint-plugin-json
          VALIDATE_MARKDOWN: true                   # https://github.com/igorshubovych/markdownlint-cli
          MARKDOWN_CONFIG_FILE: .markdownlint.yml
          VALIDATE_XML: true                        # http://xmlsoft.org/
          VALIDATE_YAML: true                       # https://github.com/adrienverge/yamllint
          VALIDATE_PYTHON_ISORT: true               # https://pypi.org/project/isort/
          PYTHON_ISORT_CONFIG_FILE: pyproject.toml
          VALIDATE_GITLEAKS: true                   # https://github.com/gitleaks/gitleaks
          # VALIDATE_EDITORCONFIG: true             # https://github.com/editorconfig-checker/editorconfig-checker
          # VALIDATE_JSCPD: true                    # https://github.com/kucherenko/jscpd
          # VALIDATE_JSCPD_ALL_CODEBASE: true       # lint the whole codebase. If false: lint files one by one
          # VALIDATE_NATURAL_LANGUAGE: true         # https://textlint.github.io/

      - name: unittests
        run: poetry run pytest test/unittests/

      - name: e2e tests
        run: |
          poetry run dsp-tools start-stack --no-prune
          poetry run pytest test/e2e/
