# See https://packaging.python.org/en/latest/specifications/declaring-project-metadata

[tool.poetry]
name = "dsp-tools"
version = "2.2.2"
description = "DSP-TOOLS is a Python package with a command line interface that helps you interact with a DaSCH service platform (DSP) server."
authors = ["DaSCH - Swiss National Data and Service Center for the Humanities <info@dasch.swiss>"]
readme = "docs/index.md"
license = "GPL-3.0-only"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]
documentation = "https://docs.dasch.swiss/latest/DSP-TOOLS/"
homepage = "https://www.dasch.swiss/"
repository = "https://github.com/dasch-swiss/dsp-tools"
include = [
    "src/dsp_tools/resources/*"
]
exclude = [
    "src/dsp_tools/import_scripts/*"
]


[tool.poetry.dependencies]
python = ">=3.9,<3.12"
jsonpath-ng = "^1.5.3"
argparse = "^1.4.0"
lxml = "^4.9.2"
requests = "^2.28.1"
jsonschema = "^4.17.3"
openpyxl = "^3.0.10"
networkx = "^2.8.8"
pandas = "^1.5.2"
xlrd = ">=1.0.0"            # without this, pandas raises an ImportError: Missing optional dependency 'xlrd'
regex = "^2022.10.31"


[tool.poetry.group.dev.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^8.5.11"
mkdocs-include-markdown-plugin = "^4.0.3"
mypy = "^0.991"
autopep8 = "^2.0.1"
pytest = "^7.2.0"
types-requests = "^2.28.11.7"
types-lxml = "^2023.3.28"
pylint = "^2.17.3"
types-jsonschema = "^4.17.0.7"
types-openpyxl = "^3.1.0.4"
types-regex = "^2023.3.23.1"


[tool.poetry.scripts]
# definition of the entry point
dsp-tools = "dsp_tools.dsp_tools:main"


[tool.poetry-exec-plugin.commands]
# plugin (https://github.com/keattang/poetry-exec-plugin) to define commands available for the developers
# e.g. `poetry exec check-links`
check-links = "markdown-link-validator ./docs -i \\.\\/assets\\/.+ -i .+github\\.com\\/dasch\\-swiss\\/dsp-tools\\/settings"
# `mkdocs serve` can normally be executed without custom port. This is only necessary on machines where the standard
# port is taken already
docs-serve = "mkdocs serve --dev-addr=localhost:7979"


[build-system]
# Tells “frontend” build tools (like pip, build, or poetry) what “backend” build tool to use (e.g. setuptools, poetry).
# The "backend" doesn't need to be installed. It will be installed by the "frontend" in a temporary, isolated
# environment for use during the build process.
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
# see https://docs.pytest.org/en/latest/explanation/goodpractices.html#tests-outside-application-code


[tool.autopep8]
max_line_length = 150
experimental = true


[tool.mypy]
ignore_missing_imports = true
show_column_numbers = true
strict = true
exclude = [
    "src/dsp_tools/models",           # TODO: activate this
    "src/dsp_tools/import_scripts",   # TODO: activate this
    "test/unittests",                 # TODO: activate this
    "test/e2e",                       # TODO: activate this
]


[tool.isort]
multi_line_output = 3
known_first_party = ["dsp_tools"]


[tool.pylint.MASTER]
ignore-paths = [
    "src/dsp_tools/models/.*$",           # TODO: activate this
    "src/dsp_tools/import_scripts/.*$",   # TODO: activate this
    "test/unittests/.*$",                 # TODO: activate this
    "test/e2e/.*$"                        # TODO: activate this
]
suggestion-mode = true


[tool.pylint.format]
max-line-length = 150


[tool.pylint."messages control"]
disable = [
    "raw-checker-failed",                  # disabled by default
    "bad-inline-option",                   # disabled by default
    "locally-disabled",                    # disabled by default
    "file-ignored",                        # disabled by default
    "suppressed-message",                  # disabled by default
    "deprecated-pragma",                   # disabled by default
    "use-symbolic-message-instead",        # disabled by default
    "c-extension-no-member",               # probably not necessary
    "use-dict-literal",                    # not worth the effort
    "use-list-literal",                    # not worth the effort
    "missing-module-docstring",            # not worth the effort
    "trailing-whitespace",                 # not worth the effort
    "use-maxsplit-arg",                    # not worth the effort
    "global-statement",                    # not worth the effort
    "no-else-continue",                    # would be less readable
    "no-else-return",                      # would be less readable
    "no-else-raise",                       # would be less readable
    "logging-fstring-interpolation",       # would be less readable
    "invalid-name",                        # TODO: activate this
    "too-many-arguments",                  # TODO: activate this
    "too-many-branches",                   # TODO: activate this
    "too-many-lines",                      # TODO: activate this
    "too-many-locals",                     # TODO: activate this
    "too-many-nested-blocks",              # TODO: activate this
    "too-many-return-statements",          # TODO: activate this
    "too-many-statements",                 # TODO: activate this
    "bare-except",                         # TODO: activate this
    "consider-using-f-string",             # in excel2xml, strings with {} in it must be formatted
]
