# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#writing-pyproject-toml

[project]
name = "dsp-tools"
version = "10.6.0"
description = "DSP-TOOLS is a Python package with a command line interface that helps you interact with a DaSCH service platform (DSP) server."
authors = [{name = "DaSCH - Swiss National Data and Service Center for the Humanities", email = "info@dasch.swiss"}]
readme = "docs/index.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]
requires-python = ">=3.12"
dependencies = [
    "argparse",
    "jsonpath-ng",
    "jsonschema",
    "loguru",
    "lxml",
    "namedentities",
    "networkx",
    "openpyxl",
    "packaging",
    "pandas[excel]",
    # pandas: "excel" is an extra that contains xlrd that is necessary for reading old .xls Excel files
    "pyld",
    "pyyaml",
    "rdflib",
    "regex",
    "requests",
    "rustworkx",
    "tqdm",
]


[project.urls]
Homepage = "https://www.dasch.swiss/"
Documentation = "https://docs.dasch.swiss/latest/DSP-TOOLS/"
Repository = "https://github.com/dasch-swiss/dsp-tools.git"


[project.scripts]
dsp-tools = "dsp_tools.cli.entry_point:main"  # definition of the CLI entry point


[build-system]
# Tells “frontend” build tools (like pip, build, or uv) what “backend” build tool to use (e.g. setuptools, hatchling).
# The "backend" doesn't need to be installed. It will be installed by the "frontend" in a temporary, isolated
# environment for use during the build process.
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.uv]
dev-dependencies = [
    "darglint",
    "docker",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocs",
    "mkdocstrings[python]",
    "mypy",
    "pandas-stubs",
    "pre-commit",
    "pytest-cov",
    "pytest-unordered",
    "pytest==8.0.2",
    # pytest: don't upgrade until https://github.com/pytest-dev/pytest/issues/12044 is fixed
    "requests-mock",
    "ruff",
    "testcontainers==4.7.2",
    # testcontainers: don't upgrade until https://github.com/dasch-swiss/dsp-tools/pull/1122#discussion_r1723055599 is fixed
    "tomlkit",
    "types-docker",
    "types-jsonschema",
    "types-lxml",
    "types-networkx",
    "types-openpyxl",
    "types-pyyaml",
    "types-regex",
    "types-requests",
    "types-tqdm",
    "viztracer",
    "yamllint",
    "typing-extensions",
]


[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
# see https://docs.pytest.org/en/latest/explanation/goodpractices.html#tests-outside-application-code
pythonpath = [".", "src", "test"]


[tool.mypy]
show_column_numbers = true
strict = true
enable_error_code = ["possibly-undefined"]
exclude = [
    "src/dsp_tools/models/datetimestamp.py",                  # TODO: activate this
    "src/dsp_tools/models/langstring.py",                     # TODO: activate this
    "src/dsp_tools/models/projectContext.py",                 # TODO: activate this
    "src/dsp_tools/commands/project/models/context.py",       # TODO: activate this
    "src/dsp_tools/commands/project/models/group.py",         # TODO: activate this
    "src/dsp_tools/commands/project/models/helpers.py",       # TODO: activate this
    "src/dsp_tools/commands/project/models/listnode.py",      # TODO: activate this
    "src/dsp_tools/commands/project/models/ontology.py",      # TODO: activate this
    "src/dsp_tools/commands/project/models/project.py",       # TODO: activate this
    "src/dsp_tools/commands/project/models/propertyclass.py", # TODO: activate this
    "src/dsp_tools/commands/project/models/resourceclass.py", # TODO: activate this
    "src/dsp_tools/commands/project/models/user.py",          # TODO: activate this
]


[[tool.mypy.overrides]]
# For these packages, no type stubs are available yet:
module = ["jsonpath_ng.*", "viztracer.*", "pyld.*", "testcontainers.*"]
ignore_missing_imports = true


[tool.ruff]
line-length = 120


[tool.ruff.lint]
select = [
    "RUF",      # ruff-specific rules
    "PL",       # pylint
    "I",        # isort
    "E",        # pycodestyle errors
    "F",        # pyflakes
    "A",        # flake8-builtins
    "BLE",      # flake8-blind-except
    "ARG",      # flake8-unused-arguments
    "S",        # flake8-bandit plugin which checks for security issues
    "YTT",      # flake8-2020 plugin, which checks for misuse of `sys.version` or `sys.version_info`
    "ASYNC",    # flake8-async plugin, which checks for bad async / asyncio practices
    "ISC",      # flake8-implicit-str-concat plugin, which checks for problematic string concatenation
    "INP",      # flake8-no-pep420 plugin, which checks for missing __init__.py files
    "PIE",      # flake8-pie plugin, which does miscellaneous checks
    "PT",       # flake8-pytest-style plugin
    "TID",      # flake8-tidy-imports plugin
    "ICN",      # flake8-import-conventions plugin, which checks for import conventions
    "ARG",      # flake8-unused-arguments
    "PGH",      # pygrep-hooks: A collection of fast, cheap, regex based pre-commit hooks
    "UP031",    # pyupgrade: printf-string-formatting
    "D101",     # pydocstyle: undocumented-public-class
    "D102",     # pydocstyle: undocumented-public-method
    "D103",     # pydocstyle: undocumented-public-function
    "D417",     # pydocstyle: undocumented-param
    "B023",     # flake8-bugbear: function-uses-loop-variable
    "FIX",      # flake8-fixme: checks for FIXME, TODO, XXX, etc.
]
ignore = [
    "ISC001",   # flake8-implicit-str-concat: single-line-implicit-string-concatenation  # incompatible with the formatter
    "S105",     # flake8-bandit: hardcoded password
    "S106",     # flake8-bandit: hardcoded password
    "S603",     # flake8-bandit: subprocess-without-shell-equals-true
    "S320",     # flake8-bandit: xml parsing vulnerable to XML attacks
]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",     # unused-import
    "F403",     # undefined-local-with-import-star
    "PLC0414",  # useless-import-alias
]
"testdata/**" = [
    "INP001",   # implicit-namespace-package    # there are some python files, but no __init__.py
]
"test/*" = [
    "D103",     # pydocstyle: undocumented-public-function
    "D102",     # pydocstyle: undocumented-public-method
    "D101",     # pydocstyle: undocumented-public-class
    "S101",     # flake8-bandit: use of assert
]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.isort]
force-single-line = true

