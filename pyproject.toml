# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#writing-pyproject-toml

[tool.poetry]
name = "dsp-tools"
version = "5.6.0"
description = "DSP-TOOLS is a Python package with a command line interface that helps you interact with a DaSCH service platform (DSP) server."
authors = ["DaSCH - Swiss National Data and Service Center for the Humanities <info@dasch.swiss>"]
readme = "docs/index.md"
license = "GPL-3.0-only"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]
documentation = "https://docs.dasch.swiss/latest/DSP-TOOLS/"
homepage = "https://www.dasch.swiss/"
repository = "https://github.com/dasch-swiss/dsp-tools"
include = [
    "src/dsp_tools/resources/*",
    "src/dsp_tools/py.typed"  # see https://mypy.readthedocs.io/en/stable/installed_packages.html#making-pep-561-compatible-packages
]
exclude = ["src/dsp_tools/import_scripts/*"]


[tool.poetry.dependencies]
python = "^3.11"
jsonpath-ng = "^1.6.0"
argparse = "^1.4.0"
lxml = "^4.9.3"
requests = "^2.31.0"
jsonschema = "^4.19.1"
openpyxl = "^3.1.2"
networkx = "^3.1"
pandas = {version = "^2.0.3", extras = ["excel"]}  # extra package that contains xlrd that is necessary for reading old .xls Excel files
regex = "^2023.10.3"
docker = "^6.1.3"
pyyaml = "^6.0.1"
rustworkx = "^0.13.2"


[tool.poetry.group.dev.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.6"
mkdocs-include-markdown-plugin = "^6.0.3"
mypy = "^1.6.1"
pytest = "^7.4.2"
pre-commit = "^3.5.0"
darglint = "^1.8.1"
types-requests = "^2.31.0.10"
types-lxml = "^2023.3.28"
types-jsonschema = "^4.19.0.3"
types-openpyxl = "^3.1.0.24"
types-regex = "^2023.10.3.0"
types-pyyaml = "^6.0.12.12"
termcolor = "^2.3.0"
pytest-unordered = "^0.5.2"
viztracer = "^0.16.0"
ruff = "^0.1.6"
pytest-sugar = "^0.9.7"


[tool.poetry.scripts]
dsp-tools = "dsp_tools.cli.entry_point:main"  # definition of the CLI entry point


[tool.poetry-exec-plugin.commands]
# plugin (https://github.com/keattang/poetry-exec-plugin) to define commands available for the developers,
# e.g. `poetry exec check-links`
check-links = """
    markdown-link-validator \
    ./docs \
    -i \\.\\/assets\\/.+ \
    -i .+github\\.com\\/dasch\\-swiss\\/dsp-tools\\/settings \
    -i .+github\\.com\\/dasch\\-swiss\\/ops-deploy\\/.+\
"""
darglint = """
    find . -name "*.py" \
    -not -path "./src/dsp_tools/models/*" \
    -not -path "./src/dsp_tools/commands/xmlupload/models/*" \
    -not -path "./src/dsp_tools/commands/project/models/*" \
    -not -path "./.git/*" \
    | xargs poetry run darglint -v 2\
"""
clean = """
    rm -rf **/*.pyc
    rm -rf **/__pycache__
    rm -rf **/.pytest_cache
    rm -rf **/.mypy_cache
    rm -rf *id2iri_mapping*.json
"""


[build-system]
# Tells “frontend” build tools (like pip, build, or poetry) what “backend” build tool to use (e.g. setuptools, poetry).
# The "backend" doesn't need to be installed. It will be installed by the "frontend" in a temporary, isolated
# environment for use during the build process.
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
# see https://docs.pytest.org/en/latest/explanation/goodpractices.html#tests-outside-application-code
pythonpath = [".", "src", "test"]


[tool.mypy]
ignore_missing_imports = true                                 # TODO: deactivate this
show_column_numbers = true
strict = true
exclude = [
    "src/dsp_tools/models/helpers.py",                        # TODO: activate this
    "src/dsp_tools/models/langstring.py",                     # TODO: activate this
    "src/dsp_tools/commands/project/models/group.py",         # TODO: activate this
    "src/dsp_tools/commands/project/models/listnode.py",      # TODO: activate this
    "src/dsp_tools/commands/project/models/ontology.py",      # TODO: activate this
    "src/dsp_tools/commands/project/models/project.py",       # TODO: activate this
    "src/dsp_tools/models/projectContext.py",                 # TODO: activate this
    "src/dsp_tools/commands/project/models/propertyclass.py", # TODO: activate this
    "src/dsp_tools/commands/project/models/resourceclass.py", # TODO: activate this
    "src/dsp_tools/commands/project/models/user.py",          # TODO: activate this
]


[tool.ruff]
line-length = 120
target-version = "py311"


[tool.ruff.lint]
select = [
    "RUF",      # ruff-specific rules
    "PL",       # pylint
    "I",        # isort
    "E",        # pycodestyle errors
    "F",        # pyflakes
    "A",        # flake8-builtins
    "BLE",      # flake8-blind-except
    "ARG",      # flake8-unused-arguments
    "YTT",      # flake8-2020 plugin, which checks for misuse of `sys.version` or `sys.version_info`
    "ASYNC",    # flake8-async plugin, which checks for bad async / asyncio practices
    "ISC",      # flake8-implicit-str-concat plugin, which checks for problematic string concatenation
    "INP",      # flake8-no-pep420 plugin, which checks for missing __init__.py files
    "PIE",      # flake8-pie plugin, which does miscellaneous checks
    "PT",       # flake8-pytest-style plugin
    "TID",      # flake8-tidy-imports plugin
    "ICN",      # flake8-import-conventions plugin, which checks for import conventions
    "ARG",      # flake8-unused-arguments
    "PGH",      # pygrep-hooks: A collection of fast, cheap, regex based pre-commit hooks
    "UP031",    # pyupgrade: printf-string-formatting
    "D101",     # pydocstyle: undocumented-public-class
    "D102",     # pydocstyle: undocumented-public-method
    "D103",     # pydocstyle: undocumented-public-function
    "D417",     # pydocstyle: undocumented-param
    "B023",     # flake8-bugbear: function-uses-loop-variable
]
ignore = [
    "ISC001",   # flake8-implicit-str-concat: single-line-implicit-string-concatenation  # incompatible with the formatter
]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",     # unused-import
    "F403",     # undefined-local-with-import-star
    "PLC0414",  # useless-import-alias
]
"testdata/**" = [
    "INP001",   # implicit-namespace-package    # there are some python files, but no __init__.py
]
"test/*" = [
    "D103",     # pydocstyle: undocumented-public-function
    "D102",     # pydocstyle: undocumented-public-method
    "D101",     # pydocstyle: undocumented-public-class
]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.isort]
known-first-party = ["dsp_tools"]
