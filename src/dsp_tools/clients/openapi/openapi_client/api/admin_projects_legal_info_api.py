# coding: utf-8

"""
    DSP-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.copyright_holder_add_request import CopyrightHolderAddRequest
from openapi_client.models.copyright_holder_replace_request import CopyrightHolderReplaceRequest
from openapi_client.models.paged_response_authorship import PagedResponseAuthorship
from openapi_client.models.paged_response_copyright_holder import PagedResponseCopyrightHolder
from openapi_client.models.paged_response_license_dto import PagedResponseLicenseDto

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AdminProjectsLegalInfoApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_authorships(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedResponseAuthorship:
        """get_admin_projects_shortcode_projectshortcode_legal_info_authorships

        Get the allowed authorships for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_authorships_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseAuthorship",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_authorships_with_http_info(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedResponseAuthorship]:
        """get_admin_projects_shortcode_projectshortcode_legal_info_authorships

        Get the allowed authorships for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_authorships_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseAuthorship",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_authorships_without_preload_content(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_admin_projects_shortcode_projectshortcode_legal_info_authorships

        Get the allowed authorships for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_authorships_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseAuthorship",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_admin_projects_shortcode_projectshortcode_legal_info_authorships_serialize(
        self,
        project_shortcode,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        page,
        page_size,
        filter,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_shortcode is not None:
            _path_params['projectShortcode'] = project_shortcode
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/admin/projects/shortcode/{projectShortcode}/legal-info/authorships',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedResponseCopyrightHolder:
        """get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Get the allowed copyright holders for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseCopyrightHolder",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_with_http_info(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedResponseCopyrightHolder]:
        """get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Get the allowed copyright holders for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseCopyrightHolder",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_without_preload_content(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Get the allowed copyright holders for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseCopyrightHolder",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
        self,
        project_shortcode,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        page,
        page_size,
        filter,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_shortcode is not None:
            _path_params['projectShortcode'] = project_shortcode
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/admin/projects/shortcode/{projectShortcode}/legal-info/copyright-holders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_licenses(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedResponseLicenseDto:
        """get_admin_projects_shortcode_projectshortcode_legal_info_licenses

        Get the allowed licenses for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_licenses_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseLicenseDto",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_licenses_with_http_info(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedResponseLicenseDto]:
        """get_admin_projects_shortcode_projectshortcode_legal_info_licenses

        Get the allowed licenses for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_licenses_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseLicenseDto",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_admin_projects_shortcode_projectshortcode_legal_info_licenses_without_preload_content(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of the desired page to be returned.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of items per page to be returned.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Filter the results.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Sort the results in ascending (asc) or descending (desc) order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_admin_projects_shortcode_projectshortcode_legal_info_licenses

        Get the allowed licenses for use within this project. The user must be project member, project admin or system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param page: The number of the desired page to be returned.
        :type page: int
        :param page_size: The number of items per page to be returned.
        :type page_size: int
        :param filter: Filter the results.
        :type filter: str
        :param order: Sort the results in ascending (asc) or descending (desc) order.
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_admin_projects_shortcode_projectshortcode_legal_info_licenses_serialize(
            project_shortcode=project_shortcode,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            page=page,
            page_size=page_size,
            filter=filter,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedResponseLicenseDto",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_admin_projects_shortcode_projectshortcode_legal_info_licenses_serialize(
        self,
        project_shortcode,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        page,
        page_size,
        filter,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_shortcode is not None:
            _path_params['projectShortcode'] = project_shortcode
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/admin/projects/shortcode/{projectShortcode}/legal-info/licenses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        copyright_holder_add_request: CopyrightHolderAddRequest,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Add new allowed copyright holders for use within this project. The user must be a system or project admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param copyright_holder_add_request: (required)
        :type copyright_holder_add_request: CopyrightHolderAddRequest
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            copyright_holder_add_request=copyright_holder_add_request,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_with_http_info(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        copyright_holder_add_request: CopyrightHolderAddRequest,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Add new allowed copyright holders for use within this project. The user must be a system or project admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param copyright_holder_add_request: (required)
        :type copyright_holder_add_request: CopyrightHolderAddRequest
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            copyright_holder_add_request=copyright_holder_add_request,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_without_preload_content(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        copyright_holder_add_request: CopyrightHolderAddRequest,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Add new allowed copyright holders for use within this project. The user must be a system or project admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param copyright_holder_add_request: (required)
        :type copyright_holder_add_request: CopyrightHolderAddRequest
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            copyright_holder_add_request=copyright_holder_add_request,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
        self,
        project_shortcode,
        copyright_holder_add_request,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_shortcode is not None:
            _path_params['projectShortcode'] = project_shortcode
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if copyright_holder_add_request is not None:
            _body_params = copyright_holder_add_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/admin/projects/shortcode/{projectShortcode}/legal-info/copyright-holders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        copyright_holder_replace_request: CopyrightHolderReplaceRequest,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Update a particular allowed copyright holder for use within this project, does not update existing values on assets. The user must be a system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param copyright_holder_replace_request: (required)
        :type copyright_holder_replace_request: CopyrightHolderReplaceRequest
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            copyright_holder_replace_request=copyright_holder_replace_request,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_with_http_info(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        copyright_holder_replace_request: CopyrightHolderReplaceRequest,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Update a particular allowed copyright holder for use within this project, does not update existing values on assets. The user must be a system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param copyright_holder_replace_request: (required)
        :type copyright_holder_replace_request: CopyrightHolderReplaceRequest
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            copyright_holder_replace_request=copyright_holder_replace_request,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_without_preload_content(
        self,
        project_shortcode: Annotated[StrictStr, Field(description="The shortcode of a project. Must be a 4 digit hexadecimal String.")],
        copyright_holder_replace_request: CopyrightHolderReplaceRequest,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders

        Update a particular allowed copyright holder for use within this project, does not update existing values on assets. The user must be a system admin.

        :param project_shortcode: The shortcode of a project. Must be a 4 digit hexadecimal String. (required)
        :type project_shortcode: str
        :param copyright_holder_replace_request: (required)
        :type copyright_holder_replace_request: CopyrightHolderReplaceRequest
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
            project_shortcode=project_shortcode,
            copyright_holder_replace_request=copyright_holder_replace_request,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_admin_projects_shortcode_projectshortcode_legal_info_copyright_holders_serialize(
        self,
        project_shortcode,
        copyright_holder_replace_request,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_shortcode is not None:
            _path_params['projectShortcode'] = project_shortcode
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if copyright_holder_replace_request is not None:
            _body_params = copyright_holder_replace_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/admin/projects/shortcode/{projectShortcode}/legal-info/copyright-holders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


