# coding: utf-8

"""
    DSP-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class V2OntologiesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_v2_ontologies_classes_comment_resourceclassiri(
        self,
        resource_class_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """delete_v2_ontologies_classes_comment_resourceclassiri

        Delete the comment of a class definition.

        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_classes_comment_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_v2_ontologies_classes_comment_resourceclassiri_with_http_info(
        self,
        resource_class_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """delete_v2_ontologies_classes_comment_resourceclassiri

        Delete the comment of a class definition.

        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_classes_comment_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_v2_ontologies_classes_comment_resourceclassiri_without_preload_content(
        self,
        resource_class_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_v2_ontologies_classes_comment_resourceclassiri

        Delete the comment of a class definition.

        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_classes_comment_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_v2_ontologies_classes_comment_resourceclassiri_serialize(
        self,
        resource_class_iri,
        last_modification_date,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_class_iri is not None:
            _path_params['resourceClassIri'] = resource_class_iri
        # process the query parameters
        if last_modification_date is not None:
            
            _query_params.append(('lastModificationDate', last_modification_date))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/ontologies/classes/comment/{resourceClassIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_v2_ontologies_classes_resourceclassiri(
        self,
        resource_class_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """delete_v2_ontologies_classes_resourceclassiri


        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_classes_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_v2_ontologies_classes_resourceclassiri_with_http_info(
        self,
        resource_class_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """delete_v2_ontologies_classes_resourceclassiri


        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_classes_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_v2_ontologies_classes_resourceclassiri_without_preload_content(
        self,
        resource_class_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_v2_ontologies_classes_resourceclassiri


        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_classes_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_v2_ontologies_classes_resourceclassiri_serialize(
        self,
        resource_class_iri,
        last_modification_date,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_class_iri is not None:
            _path_params['resourceClassIri'] = resource_class_iri
        # process the query parameters
        if last_modification_date is not None:
            
            _query_params.append(('lastModificationDate', last_modification_date))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/ontologies/classes/{resourceClassIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_v2_ontologies_comment_ontologyiri(
        self,
        ontology_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """delete_v2_ontologies_comment_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_comment_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_v2_ontologies_comment_ontologyiri_with_http_info(
        self,
        ontology_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """delete_v2_ontologies_comment_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_comment_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_v2_ontologies_comment_ontologyiri_without_preload_content(
        self,
        ontology_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_v2_ontologies_comment_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_comment_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_v2_ontologies_comment_ontologyiri_serialize(
        self,
        ontology_iri,
        last_modification_date,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ontology_iri is not None:
            _path_params['ontologyIri'] = ontology_iri
        # process the query parameters
        if last_modification_date is not None:
            
            _query_params.append(('lastModificationDate', last_modification_date))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/ontologies/comment/{ontologyIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_v2_ontologies_ontologyiri(
        self,
        ontology_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """delete_v2_ontologies_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_v2_ontologies_ontologyiri_with_http_info(
        self,
        ontology_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """delete_v2_ontologies_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_v2_ontologies_ontologyiri_without_preload_content(
        self,
        ontology_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_v2_ontologies_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_v2_ontologies_ontologyiri_serialize(
        self,
        ontology_iri,
        last_modification_date,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ontology_iri is not None:
            _path_params['ontologyIri'] = ontology_iri
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        if last_modification_date is not None:
            
            _query_params.append(('lastModificationDate', last_modification_date))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/ontologies/{ontologyIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_v2_ontologies_properties_comment_propertyiri(
        self,
        property_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """delete_v2_ontologies_properties_comment_propertyiri


        :param property_iri: (required)
        :type property_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_properties_comment_propertyiri_serialize(
            property_iri=property_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_v2_ontologies_properties_comment_propertyiri_with_http_info(
        self,
        property_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """delete_v2_ontologies_properties_comment_propertyiri


        :param property_iri: (required)
        :type property_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_properties_comment_propertyiri_serialize(
            property_iri=property_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_v2_ontologies_properties_comment_propertyiri_without_preload_content(
        self,
        property_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_v2_ontologies_properties_comment_propertyiri


        :param property_iri: (required)
        :type property_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_properties_comment_propertyiri_serialize(
            property_iri=property_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_v2_ontologies_properties_comment_propertyiri_serialize(
        self,
        property_iri,
        last_modification_date,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if property_iri is not None:
            _path_params['propertyIri'] = property_iri
        # process the query parameters
        if last_modification_date is not None:
            
            _query_params.append(('lastModificationDate', last_modification_date))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/ontologies/properties/comment/{propertyIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_v2_ontologies_properties_propertyiri(
        self,
        property_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """delete_v2_ontologies_properties_propertyiri


        :param property_iri: (required)
        :type property_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_properties_propertyiri_serialize(
            property_iri=property_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_v2_ontologies_properties_propertyiri_with_http_info(
        self,
        property_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """delete_v2_ontologies_properties_propertyiri


        :param property_iri: (required)
        :type property_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_properties_propertyiri_serialize(
            property_iri=property_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_v2_ontologies_properties_propertyiri_without_preload_content(
        self,
        property_iri: StrictStr,
        last_modification_date: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_v2_ontologies_properties_propertyiri


        :param property_iri: (required)
        :type property_iri: str
        :param last_modification_date: (required)
        :type last_modification_date: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_v2_ontologies_properties_propertyiri_serialize(
            property_iri=property_iri,
            last_modification_date=last_modification_date,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_v2_ontologies_properties_propertyiri_serialize(
        self,
        property_iri,
        last_modification_date,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if property_iri is not None:
            _path_params['propertyIri'] = property_iri
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        if last_modification_date is not None:
            
            _query_params.append(('lastModificationDate', last_modification_date))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/ontologies/properties/{propertyIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ontology(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_ontology

        This is the route used to dereference an actual ontology IRI. If the URL path looks like it belongs to a built-in API ontology (which has to contain \"knora-api\"), prefix it with http://api.knora.org to get the ontology IRI. Otherwise, if it looks like it belongs to a project-specific API ontology, prefix it with routeData.appConfig.externalOntologyIriHostAndPort to get the ontology IRI.

        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ontology_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ontology_with_http_info(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_ontology

        This is the route used to dereference an actual ontology IRI. If the URL path looks like it belongs to a built-in API ontology (which has to contain \"knora-api\"), prefix it with http://api.knora.org to get the ontology IRI. Otherwise, if it looks like it belongs to a project-specific API ontology, prefix it with routeData.appConfig.externalOntologyIriHostAndPort to get the ontology IRI.

        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ontology_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ontology_without_preload_content(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_ontology

        This is the route used to dereference an actual ontology IRI. If the URL path looks like it belongs to a built-in API ontology (which has to contain \"knora-api\"), prefix it with http://api.knora.org to get the ontology IRI. Otherwise, if it looks like it belongs to a project-specific API ontology, prefix it with routeData.appConfig.externalOntologyIriHostAndPort to get the ontology IRI.

        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ontology_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ontology_serialize(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        all_languages,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if all_languages is not None:
            
            _query_params.append(('allLanguages', all_languages))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ontology',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_allentities_ontologyiri(
        self,
        ontology_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_allentities_ontologyiri

        Get all entities of an ontology

        :param ontology_iri: (required)
        :type ontology_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_allentities_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_allentities_ontologyiri_with_http_info(
        self,
        ontology_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_allentities_ontologyiri

        Get all entities of an ontology

        :param ontology_iri: (required)
        :type ontology_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_allentities_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_allentities_ontologyiri_without_preload_content(
        self,
        ontology_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_allentities_ontologyiri

        Get all entities of an ontology

        :param ontology_iri: (required)
        :type ontology_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_allentities_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_allentities_ontologyiri_serialize(
        self,
        ontology_iri,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        all_languages,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ontology_iri is not None:
            _path_params['ontologyIri'] = ontology_iri
        # process the query parameters
        if all_languages is not None:
            
            _query_params.append(('allLanguages', all_languages))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/allentities/{ontologyIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_candeleteclass_resourceclassiri(
        self,
        resource_class_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_candeleteclass_resourceclassiri


        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_candeleteclass_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_candeleteclass_resourceclassiri_with_http_info(
        self,
        resource_class_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_candeleteclass_resourceclassiri


        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_candeleteclass_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_candeleteclass_resourceclassiri_without_preload_content(
        self,
        resource_class_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_candeleteclass_resourceclassiri


        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_candeleteclass_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_candeleteclass_resourceclassiri_serialize(
        self,
        resource_class_iri,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_class_iri is not None:
            _path_params['resourceClassIri'] = resource_class_iri
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/candeleteclass/{resourceClassIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_candeleteontology_ontologyiri(
        self,
        ontology_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_candeleteontology_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_candeleteontology_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_candeleteontology_ontologyiri_with_http_info(
        self,
        ontology_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_candeleteontology_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_candeleteontology_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_candeleteontology_ontologyiri_without_preload_content(
        self,
        ontology_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_candeleteontology_ontologyiri


        :param ontology_iri: (required)
        :type ontology_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_candeleteontology_ontologyiri_serialize(
            ontology_iri=ontology_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_candeleteontology_ontologyiri_serialize(
        self,
        ontology_iri,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ontology_iri is not None:
            _path_params['ontologyIri'] = ontology_iri
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/candeleteontology/{ontologyIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_canreplacecardinalities_resourceclassiri(
        self,
        resource_class_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        property_iri: Optional[StrictStr] = None,
        new_cardinality: Annotated[Optional[StrictStr], Field(description="The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1")] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_canreplacecardinalities_resourceclassiri

        If only a class IRI is provided, this endpoint checks if any cardinality of any of the class properties can be replaced. If a property IRI and a new cardinality are provided, it checks if the cardinality can be set for the property on the specific class. Fails if not both a property IRI and a new cardinality is provided. Fails if the user does not have write access to the ontology of the class.

        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param property_iri:
        :type property_iri: str
        :param new_cardinality: The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1
        :type new_cardinality: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_canreplacecardinalities_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            property_iri=property_iri,
            new_cardinality=new_cardinality,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_canreplacecardinalities_resourceclassiri_with_http_info(
        self,
        resource_class_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        property_iri: Optional[StrictStr] = None,
        new_cardinality: Annotated[Optional[StrictStr], Field(description="The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1")] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_canreplacecardinalities_resourceclassiri

        If only a class IRI is provided, this endpoint checks if any cardinality of any of the class properties can be replaced. If a property IRI and a new cardinality are provided, it checks if the cardinality can be set for the property on the specific class. Fails if not both a property IRI and a new cardinality is provided. Fails if the user does not have write access to the ontology of the class.

        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param property_iri:
        :type property_iri: str
        :param new_cardinality: The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1
        :type new_cardinality: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_canreplacecardinalities_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            property_iri=property_iri,
            new_cardinality=new_cardinality,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_canreplacecardinalities_resourceclassiri_without_preload_content(
        self,
        resource_class_iri: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        property_iri: Optional[StrictStr] = None,
        new_cardinality: Annotated[Optional[StrictStr], Field(description="The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1")] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_canreplacecardinalities_resourceclassiri

        If only a class IRI is provided, this endpoint checks if any cardinality of any of the class properties can be replaced. If a property IRI and a new cardinality are provided, it checks if the cardinality can be set for the property on the specific class. Fails if not both a property IRI and a new cardinality is provided. Fails if the user does not have write access to the ontology of the class.

        :param resource_class_iri: (required)
        :type resource_class_iri: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param property_iri:
        :type property_iri: str
        :param new_cardinality: The new cardinality to be set for the property, must be provided when propertyIri is given. Valid values are: 1-n, 1, 0-n, 0-1
        :type new_cardinality: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_canreplacecardinalities_resourceclassiri_serialize(
            resource_class_iri=resource_class_iri,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            property_iri=property_iri,
            new_cardinality=new_cardinality,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_canreplacecardinalities_resourceclassiri_serialize(
        self,
        resource_class_iri,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        property_iri,
        new_cardinality,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_class_iri is not None:
            _path_params['resourceClassIri'] = resource_class_iri
        # process the query parameters
        if property_iri is not None:
            
            _query_params.append(('propertyIri', property_iri))
            
        if new_cardinality is not None:
            
            _query_params.append(('newCardinality', new_cardinality))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/canreplacecardinalities/{resourceClassIri}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_classes(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_classes


        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_classes_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_classes_with_http_info(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_classes


        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_classes_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_classes_without_preload_content(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_classes


        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_classes_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_classes_serialize(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        all_languages,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if all_languages is not None:
            
            _query_params.append(('allLanguages', all_languages))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/classes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_metadata(
        self,
        x_knora_accept_project: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_metadata

        Get the metadata of an ontology

        :param x_knora_accept_project:
        :type x_knora_accept_project: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_metadata_serialize(
            x_knora_accept_project=x_knora_accept_project,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_metadata_with_http_info(
        self,
        x_knora_accept_project: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_metadata

        Get the metadata of an ontology

        :param x_knora_accept_project:
        :type x_knora_accept_project: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_metadata_serialize(
            x_knora_accept_project=x_knora_accept_project,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_metadata_without_preload_content(
        self,
        x_knora_accept_project: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_metadata

        Get the metadata of an ontology

        :param x_knora_accept_project:
        :type x_knora_accept_project: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_metadata_serialize(
            x_knora_accept_project=x_knora_accept_project,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_metadata_serialize(
        self,
        x_knora_accept_project,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_project is not None:
            _header_params['x-knora-accept-project'] = x_knora_accept_project
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_v2_ontologies_properties(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_ontologies_properties


        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_properties_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_ontologies_properties_with_http_info(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_ontologies_properties


        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_properties_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_ontologies_properties_without_preload_content(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        all_languages: Optional[StrictBool] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_ontologies_properties


        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param all_languages:
        :type all_languages: bool
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_ontologies_properties_serialize(
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            all_languages=all_languages,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_ontologies_properties_serialize(
        self,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        all_languages,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if all_languages is not None:
            
            _query_params.append(('allLanguages', all_languages))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/ontologies/properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_v2_ontologies_cardinalities(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """patch_v2_ontologies_cardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_v2_ontologies_cardinalities_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """patch_v2_ontologies_cardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_v2_ontologies_cardinalities_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_v2_ontologies_cardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_v2_ontologies_cardinalities_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v2/ontologies/cardinalities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_ontologies(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_ontologies


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_ontologies_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_ontologies


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_ontologies_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_ontologies


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_ontologies_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/ontologies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_ontologies_candeletecardinalities(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_ontologies_candeletecardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_candeletecardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_ontologies_candeletecardinalities_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_ontologies_candeletecardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_candeletecardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_ontologies_candeletecardinalities_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_ontologies_candeletecardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_candeletecardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_ontologies_candeletecardinalities_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/ontologies/candeletecardinalities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_ontologies_cardinalities(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_ontologies_cardinalities

        Add cardinalities to a class. For more info check out the <a href=\"https://docs.dasch.swiss/knora-api-v2/ontologies.html#add-cardinalities-to-a-class\">documentation</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_ontologies_cardinalities_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_ontologies_cardinalities

        Add cardinalities to a class. For more info check out the <a href=\"https://docs.dasch.swiss/knora-api-v2/ontologies.html#add-cardinalities-to-a-class\">documentation</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_ontologies_cardinalities_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_ontologies_cardinalities

        Add cardinalities to a class. For more info check out the <a href=\"https://docs.dasch.swiss/knora-api-v2/ontologies.html#add-cardinalities-to-a-class\">documentation</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_ontologies_cardinalities_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/ontologies/cardinalities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_ontologies_classes(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_ontologies_classes

        Create a new class

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_classes_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_ontologies_classes_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_ontologies_classes

        Create a new class

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_classes_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_ontologies_classes_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_ontologies_classes

        Create a new class

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_classes_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_ontologies_classes_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/ontologies/classes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_ontologies_properties(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_ontologies_properties


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_properties_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_ontologies_properties_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_ontologies_properties


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_properties_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_ontologies_properties_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_ontologies_properties


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_ontologies_properties_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_ontologies_properties_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/ontologies/properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_ontologies_cardinalities(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_ontologies_cardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_ontologies_cardinalities_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_ontologies_cardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_ontologies_cardinalities_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_ontologies_cardinalities


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_cardinalities_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_ontologies_cardinalities_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/ontologies/cardinalities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_ontologies_classes(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_ontologies_classes

        Change the labels or comments of a class

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_classes_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_ontologies_classes_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_ontologies_classes

        Change the labels or comments of a class

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_classes_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_ontologies_classes_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_ontologies_classes

        Change the labels or comments of a class

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_classes_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_ontologies_classes_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/ontologies/classes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_ontologies_guiorder(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_ontologies_guiorder


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_guiorder_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_ontologies_guiorder_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_ontologies_guiorder


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_guiorder_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_ontologies_guiorder_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_ontologies_guiorder


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_guiorder_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_ontologies_guiorder_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/ontologies/guiorder',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_ontologies_metadata(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_ontologies_metadata

        Change the metadata of an ontology

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_metadata_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_ontologies_metadata_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_ontologies_metadata

        Change the metadata of an ontology

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_metadata_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_ontologies_metadata_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_ontologies_metadata

        Change the metadata of an ontology

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_metadata_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_ontologies_metadata_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/ontologies/metadata',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_ontologies_properties(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_ontologies_properties


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_properties_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_ontologies_properties_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_ontologies_properties


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_properties_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_ontologies_properties_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_ontologies_properties


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_properties_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_ontologies_properties_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/ontologies/properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_ontologies_properties_guielement(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_ontologies_properties_guielement


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_properties_guielement_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_ontologies_properties_guielement_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_ontologies_properties_guielement


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_properties_guielement_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_ontologies_properties_guielement_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_ontologies_properties_guielement


        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_ontologies_properties_guielement_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_ontologies_properties_guielement_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/ontologies/properties/guielement',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


