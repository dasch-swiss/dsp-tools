# coding: utf-8

"""
    DSP-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class V2ValuesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_v2_values_resourceiri_valueuuid(
        self,
        resource_iri: Annotated[StrictStr, Field(description="The IRI of a Resource.")],
        value_uuid: Annotated[StrictStr, Field(description="The UUID of a Value.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """get_v2_values_resourceiri_valueuuid

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param resource_iri: The IRI of a Resource. (required)
        :type resource_iri: str
        :param value_uuid: The UUID of a Value. (required)
        :type value_uuid: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param version:
        :type version: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_values_resourceiri_valueuuid_serialize(
            resource_iri=resource_iri,
            value_uuid=value_uuid,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            version=version,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_v2_values_resourceiri_valueuuid_with_http_info(
        self,
        resource_iri: Annotated[StrictStr, Field(description="The IRI of a Resource.")],
        value_uuid: Annotated[StrictStr, Field(description="The UUID of a Value.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """get_v2_values_resourceiri_valueuuid

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param resource_iri: The IRI of a Resource. (required)
        :type resource_iri: str
        :param value_uuid: The UUID of a Value. (required)
        :type value_uuid: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param version:
        :type version: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_values_resourceiri_valueuuid_serialize(
            resource_iri=resource_iri,
            value_uuid=value_uuid,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            version=version,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_v2_values_resourceiri_valueuuid_without_preload_content(
        self,
        resource_iri: Annotated[StrictStr, Field(description="The IRI of a Resource.")],
        value_uuid: Annotated[StrictStr, Field(description="The UUID of a Value.")],
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        x_knora_accept_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.")] = None,
        x_knora_json_ld_rendering: Annotated[Optional[StrictStr], Field(description="The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.")] = None,
        markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        x_knora_accept_markup: Annotated[Optional[StrictStr], Field(description="The markup rendering to be used for the request (XML or standoff).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_v2_values_resourceiri_valueuuid

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param resource_iri: The IRI of a Resource. (required)
        :type resource_iri: str
        :param value_uuid: The UUID of a Value. (required)
        :type value_uuid: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param version:
        :type version: str
        :param x_knora_accept_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type x_knora_accept_schema: str
        :param var_schema: The ontology schema to be used for the request. If not specified, the default schema ApiV2Complex will be used.
        :type var_schema: str
        :param x_knora_json_ld_rendering: The JSON-LD rendering to be used for the request (flat or hierarchical). If not specified, hierarchical JSON-LD will be used.
        :type x_knora_json_ld_rendering: str
        :param markup: The markup rendering to be used for the request (XML or standoff).
        :type markup: str
        :param x_knora_accept_markup: The markup rendering to be used for the request (XML or standoff).
        :type x_knora_accept_markup: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_v2_values_resourceiri_valueuuid_serialize(
            resource_iri=resource_iri,
            value_uuid=value_uuid,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            version=version,
            x_knora_accept_schema=x_knora_accept_schema,
            var_schema=var_schema,
            x_knora_json_ld_rendering=x_knora_json_ld_rendering,
            markup=markup,
            x_knora_accept_markup=x_knora_accept_markup,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_v2_values_resourceiri_valueuuid_serialize(
        self,
        resource_iri,
        value_uuid,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        version,
        x_knora_accept_schema,
        var_schema,
        x_knora_json_ld_rendering,
        markup,
        x_knora_accept_markup,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_iri is not None:
            _path_params['resourceIri'] = resource_iri
        if value_uuid is not None:
            _path_params['valueUuid'] = value_uuid
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        if var_schema is not None:
            
            _query_params.append(('schema', var_schema))
            
        if markup is not None:
            
            _query_params.append(('markup', markup))
            
        # process the header parameters
        if x_knora_accept_schema is not None:
            _header_params['x-knora-accept-schema'] = x_knora_accept_schema
        if x_knora_json_ld_rendering is not None:
            _header_params['x-knora-json-ld-rendering'] = x_knora_json_ld_rendering
        if x_knora_accept_markup is not None:
            _header_params['x-knora-accept-markup'] = x_knora_accept_markup
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/values/{resourceIri}/{valueUuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_values(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_values

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_values_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_values_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_values

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_values_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_values_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_values

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_values_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_values_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/values',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_v2_values_delete(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """post_v2_values_delete

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_values_delete_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_v2_values_delete_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """post_v2_values_delete

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_values_delete_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_v2_values_delete_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_v2_values_delete

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_v2_values_delete_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_v2_values_delete_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/values/delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_v2_values(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """put_v2_values

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_values_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_v2_values_with_http_info(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """put_v2_values

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_values_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_v2_values_without_preload_content(
        self,
        body: StrictStr,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_v2_values

        Find detailed documentation on <a href=\"https://docs.dasch.swiss/latest/DSP-API/03-endpoints/api-v2/editing-values/\">docs.dasch.swiss</a>.

        :param body: (required)
        :type body: str
        :param knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9:
        :type knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_v2_values_serialize(
            body=body,
            knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9=knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GetV2Authentication400Response",
            '401': "BadCredentialsException",
            '403': "ForbiddenException",
            '404': "NotFoundException",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_v2_values_serialize(
        self,
        body,
        knora_authentication_mfygsltemfzwg2_boon3_ws43_thi2_dimy9,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'httpAuth1', 
            'httpAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/values',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


