# coding: utf-8

"""
    DSP-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.description import Description
from openapi_client.models.keyword import Keyword
from openapi_client.models.logo import Logo
from openapi_client.models.longname import Longname
from openapi_client.models.project_iri import ProjectIri
from openapi_client.models.self_join import SelfJoin
from openapi_client.models.shortcode import Shortcode
from openapi_client.models.shortname import Shortname
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class ProjectCreateRequest(BaseModel):
    """
    ProjectCreateRequest
    """ # noqa: E501
    id: Optional[ProjectIri] = None
    shortname: Shortname
    shortcode: Shortcode
    longname: Optional[Longname] = None
    description: Optional[List[Description]] = None
    keywords: Optional[List[Keyword]] = None
    logo: Optional[Logo] = None
    status: Status
    selfjoin: SelfJoin
    __properties: ClassVar[List[str]] = ["id", "shortname", "shortcode", "longname", "description", "keywords", "logo", "status", "selfjoin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shortname
        if self.shortname:
            _dict['shortname'] = self.shortname.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shortcode
        if self.shortcode:
            _dict['shortcode'] = self.shortcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of longname
        if self.longname:
            _dict['longname'] = self.longname.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in description (list)
        _items = []
        if self.description:
            for _item_description in self.description:
                if _item_description:
                    _items.append(_item_description.to_dict())
            _dict['description'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item_keywords in self.keywords:
                if _item_keywords:
                    _items.append(_item_keywords.to_dict())
            _dict['keywords'] = _items
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selfjoin
        if self.selfjoin:
            _dict['selfjoin'] = self.selfjoin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": ProjectIri.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "shortname": Shortname.from_dict(obj["shortname"]) if obj.get("shortname") is not None else None,
            "shortcode": Shortcode.from_dict(obj["shortcode"]) if obj.get("shortcode") is not None else None,
            "longname": Longname.from_dict(obj["longname"]) if obj.get("longname") is not None else None,
            "description": [Description.from_dict(_item) for _item in obj["description"]] if obj.get("description") is not None else None,
            "keywords": [Keyword.from_dict(_item) for _item in obj["keywords"]] if obj.get("keywords") is not None else None,
            "logo": Logo.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "selfjoin": SelfJoin.from_dict(obj["selfjoin"]) if obj.get("selfjoin") is not None else None
        })
        return _obj


