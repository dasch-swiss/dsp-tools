# coding: utf-8

"""
    DSP-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.email import Email
from openapi_client.models.family_name import FamilyName
from openapi_client.models.given_name import GivenName
from openapi_client.models.language_code import LanguageCode
from openapi_client.models.password import Password
from openapi_client.models.system_admin import SystemAdmin
from openapi_client.models.user_iri import UserIri
from openapi_client.models.user_status import UserStatus
from openapi_client.models.username import Username
from typing import Optional, Set
from typing_extensions import Self

class UserCreateRequest(BaseModel):
    """
    UserCreateRequest
    """ # noqa: E501
    id: Optional[UserIri] = None
    username: Username
    email: Email
    given_name: GivenName = Field(alias="givenName")
    family_name: FamilyName = Field(alias="familyName")
    password: Password
    status: UserStatus
    lang: LanguageCode
    system_admin: SystemAdmin = Field(alias="systemAdmin")
    __properties: ClassVar[List[str]] = ["id", "username", "email", "givenName", "familyName", "password", "status", "lang", "systemAdmin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of username
        if self.username:
            _dict['username'] = self.username.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of given_name
        if self.given_name:
            _dict['givenName'] = self.given_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of family_name
        if self.family_name:
            _dict['familyName'] = self.family_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password
        if self.password:
            _dict['password'] = self.password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lang
        if self.lang:
            _dict['lang'] = self.lang.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_admin
        if self.system_admin:
            _dict['systemAdmin'] = self.system_admin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": UserIri.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "username": Username.from_dict(obj["username"]) if obj.get("username") is not None else None,
            "email": Email.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "givenName": GivenName.from_dict(obj["givenName"]) if obj.get("givenName") is not None else None,
            "familyName": FamilyName.from_dict(obj["familyName"]) if obj.get("familyName") is not None else None,
            "password": Password.from_dict(obj["password"]) if obj.get("password") is not None else None,
            "status": UserStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "lang": LanguageCode.from_dict(obj["lang"]) if obj.get("lang") is not None else None,
            "systemAdmin": SystemAdmin.from_dict(obj["systemAdmin"]) if obj.get("systemAdmin") is not None else None
        })
        return _obj


