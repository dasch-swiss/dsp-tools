# coding: utf-8

"""
    DSP-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_item_get_response_adm import ListItemGetResponseADM

class TestListItemGetResponseADM(unittest.TestCase):
    """ListItemGetResponseADM unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListItemGetResponseADM:
        """Test ListItemGetResponseADM
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListItemGetResponseADM`
        """
        model = ListItemGetResponseADM()
        if include_optional:
            return ListItemGetResponseADM(
                list = openapi_client.models.list_adm.ListADM(
                    listinfo = openapi_client.models.list_root_node_info_adm.ListRootNodeInfoADM(
                        id = '', 
                        project_iri = '', 
                        name = '', 
                        labels = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(
                            string_literals = [
                                openapi_client.models.string_literal_v2.StringLiteralV2(
                                    value = '', 
                                    language = '', )
                                ], ), 
                        comments = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(), 
                        is_root_node = True, ), 
                    children = [
                        openapi_client.models.list_child_node_adm.ListChildNodeADM(
                            id = '', 
                            name = '', 
                            labels = , 
                            comments = , 
                            position = 56, 
                            has_root_node = '', )
                        ], ),
                node = openapi_client.models.node_adm.NodeADM(
                    nodeinfo = openapi_client.models.list_child_node_info_adm.ListChildNodeInfoADM(
                        id = '', 
                        name = '', 
                        labels = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(
                            string_literals = [
                                openapi_client.models.string_literal_v2.StringLiteralV2(
                                    value = '', 
                                    language = '', )
                                ], ), 
                        comments = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(), 
                        position = 56, 
                        has_root_node = '', ), 
                    children = [
                        openapi_client.models.list_child_node_adm.ListChildNodeADM(
                            id = '', 
                            name = '', 
                            labels = , 
                            comments = , 
                            position = 56, 
                            has_root_node = '', )
                        ], )
            )
        else:
            return ListItemGetResponseADM(
                list = openapi_client.models.list_adm.ListADM(
                    listinfo = openapi_client.models.list_root_node_info_adm.ListRootNodeInfoADM(
                        id = '', 
                        project_iri = '', 
                        name = '', 
                        labels = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(
                            string_literals = [
                                openapi_client.models.string_literal_v2.StringLiteralV2(
                                    value = '', 
                                    language = '', )
                                ], ), 
                        comments = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(), 
                        is_root_node = True, ), 
                    children = [
                        openapi_client.models.list_child_node_adm.ListChildNodeADM(
                            id = '', 
                            name = '', 
                            labels = , 
                            comments = , 
                            position = 56, 
                            has_root_node = '', )
                        ], ),
                node = openapi_client.models.node_adm.NodeADM(
                    nodeinfo = openapi_client.models.list_child_node_info_adm.ListChildNodeInfoADM(
                        id = '', 
                        name = '', 
                        labels = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(
                            string_literals = [
                                openapi_client.models.string_literal_v2.StringLiteralV2(
                                    value = '', 
                                    language = '', )
                                ], ), 
                        comments = openapi_client.models.string_literal_sequence_v2.StringLiteralSequenceV2(), 
                        position = 56, 
                        has_root_node = '', ), 
                    children = [
                        openapi_client.models.list_child_node_adm.ListChildNodeADM(
                            id = '', 
                            name = '', 
                            labels = , 
                            comments = , 
                            position = 56, 
                            has_root_node = '', )
                        ], ),
        )
        """

    def testListItemGetResponseADM(self):
        """Test ListItemGetResponseADM"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
