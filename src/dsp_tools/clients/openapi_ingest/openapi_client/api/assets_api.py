"""
dsp-ingest

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v0.19.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Annotated
from typing import Any
from typing import Optional
from typing import Union

from pydantic import Field
from pydantic import StrictBytes
from pydantic import StrictFloat
from pydantic import StrictInt
from pydantic import StrictStr
from pydantic import validate_call

from src.dsp_tools.clients.openapi_ingest.openapi_client.api_client import ApiClient
from src.dsp_tools.clients.openapi_ingest.openapi_client.api_client import RequestSerialized
from src.dsp_tools.clients.openapi_ingest.openapi_client.api_response import ApiResponse
from src.dsp_tools.clients.openapi_ingest.openapi_client.models.asset_info_response import AssetInfoResponse
from src.dsp_tools.clients.openapi_ingest.openapi_client.rest import RESTResponseType


class AssetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_projects_shortcode_assets_assetid(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        asset_id: Annotated[str, Field(strict=True, description="The id of the asset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AssetInfoResponse:
        """get_projects_shortcode_assets_assetid

        Authorization: read:project:1234 scope required.

        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param asset_id: The id of the asset (required)
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_projects_shortcode_assets_assetid_serialize(
            shortcode=shortcode,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "AssetInfoResponse",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_projects_shortcode_assets_assetid_with_http_info(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        asset_id: Annotated[str, Field(strict=True, description="The id of the asset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AssetInfoResponse]:
        """get_projects_shortcode_assets_assetid

        Authorization: read:project:1234 scope required.

        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param asset_id: The id of the asset (required)
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_projects_shortcode_assets_assetid_serialize(
            shortcode=shortcode,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "AssetInfoResponse",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_projects_shortcode_assets_assetid_without_preload_content(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        asset_id: Annotated[str, Field(strict=True, description="The id of the asset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_projects_shortcode_assets_assetid

        Authorization: read:project:1234 scope required.

        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param asset_id: The id of the asset (required)
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_projects_shortcode_assets_assetid_serialize(
            shortcode=shortcode,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "AssetInfoResponse",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_projects_shortcode_assets_assetid_serialize(
        self,
        shortcode,
        asset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes, list[str], list[bytes], list[tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shortcode is not None:
            _path_params["shortcode"] = shortcode
        if asset_id is not None:
            _path_params["assetId"] = asset_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: list[str] = ["httpAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/projects/{shortcode}/assets/{assetId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_projects_shortcode_assets_assetid_original(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        asset_id: Annotated[str, Field(strict=True, description="The id of the asset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """get_projects_shortcode_assets_assetid_original

        Offers the original file for download, provided the API permisisons allow. Authorization: JWT bearer token.

        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param asset_id: The id of the asset (required)
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_projects_shortcode_assets_assetid_original_serialize(
            shortcode=shortcode,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_projects_shortcode_assets_assetid_original_with_http_info(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        asset_id: Annotated[str, Field(strict=True, description="The id of the asset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """get_projects_shortcode_assets_assetid_original

        Offers the original file for download, provided the API permisisons allow. Authorization: JWT bearer token.

        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param asset_id: The id of the asset (required)
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_projects_shortcode_assets_assetid_original_serialize(
            shortcode=shortcode,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_projects_shortcode_assets_assetid_original_without_preload_content(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        asset_id: Annotated[str, Field(strict=True, description="The id of the asset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_projects_shortcode_assets_assetid_original

        Offers the original file for download, provided the API permisisons allow. Authorization: JWT bearer token.

        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param asset_id: The id of the asset (required)
        :type asset_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_projects_shortcode_assets_assetid_original_serialize(
            shortcode=shortcode,
            asset_id=asset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_projects_shortcode_assets_assetid_original_serialize(
        self,
        shortcode,
        asset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes, list[str], list[bytes], list[tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shortcode is not None:
            _path_params["shortcode"] = shortcode
        if asset_id is not None:
            _path_params["assetId"] = asset_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/octet-stream", "application/json"]
            )

        # authentication setting
        _auth_settings: list[str] = ["httpAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/projects/{shortcode}/assets/{assetId}/original",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def post_projects_shortcode_assets_ingest_filename(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        filename: StrictStr,
        body: Union[StrictBytes, StrictStr, tuple[StrictStr, StrictBytes]],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AssetInfoResponse:
        """post_projects_shortcode_assets_ingest_filename


        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param filename: (required)
        :type filename: str
        :param body: (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_projects_shortcode_assets_ingest_filename_serialize(
            shortcode=shortcode,
            filename=filename,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "AssetInfoResponse",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def post_projects_shortcode_assets_ingest_filename_with_http_info(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        filename: StrictStr,
        body: Union[StrictBytes, StrictStr, tuple[StrictStr, StrictBytes]],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AssetInfoResponse]:
        """post_projects_shortcode_assets_ingest_filename


        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param filename: (required)
        :type filename: str
        :param body: (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_projects_shortcode_assets_ingest_filename_serialize(
            shortcode=shortcode,
            filename=filename,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "AssetInfoResponse",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def post_projects_shortcode_assets_ingest_filename_without_preload_content(
        self,
        shortcode: Annotated[
            str,
            Field(
                strict=True,
                description="The shortcode of the project must be an exactly 4 characters long hexadecimal string.",
            ),
        ],
        filename: StrictStr,
        body: Union[StrictBytes, StrictStr, tuple[StrictStr, StrictBytes]],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_projects_shortcode_assets_ingest_filename


        :param shortcode: The shortcode of the project must be an exactly 4 characters long hexadecimal string. (required)
        :type shortcode: str
        :param filename: (required)
        :type filename: str
        :param body: (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._post_projects_shortcode_assets_ingest_filename_serialize(
            shortcode=shortcode,
            filename=filename,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: dict[str, Optional[str]] = {
            "200": "AssetInfoResponse",
            "400": "BadRequest",
            "401": "Unauthorized",
            "403": "Forbidden",
            "404": "NotFound",
            "409": "Conflict",
            "500": "InternalServerError",
            "503": "Unhealthy",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _post_projects_shortcode_assets_ingest_filename_serialize(
        self,
        shortcode,
        filename,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: dict[str, str] = {}

        _path_params: dict[str, str] = {}
        _query_params: list[tuple[str, str]] = []
        _header_params: dict[str, Optional[str]] = _headers or {}
        _form_params: list[tuple[str, str]] = []
        _files: dict[str, Union[str, bytes, list[str], list[bytes], list[tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if shortcode is not None:
            _path_params["shortcode"] = shortcode
        if filename is not None:
            _path_params["filename"] = filename
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            elif isinstance(body, tuple):
                # drop the filename from the tuple
                _body_params = body[1]
            else:
                _body_params = body

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/octet-stream"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: list[str] = ["httpAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/projects/{shortcode}/assets/ingest/{filename}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
