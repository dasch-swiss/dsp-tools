"""
dsp-ingest

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v0.19.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Optional
from typing import Self

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field
from pydantic import StrictStr

from src.dsp_tools.clients.openapi_ingest.openapi_client.models.single_file_check_result_response import (
    SingleFileCheckResultResponse,
)


class AssetCheckResultEntry(BaseModel):
    """
    AssetCheckResultEntry
    """

    asset_id: StrictStr = Field(alias="assetId")
    original_filename: StrictStr = Field(alias="originalFilename")
    results: Optional[list[SingleFileCheckResultResponse]] = None
    __properties: ClassVar[list[str]] = ["assetId", "originalFilename", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetCheckResultEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict["results"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetCheckResultEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assetId": obj.get("assetId"),
                "originalFilename": obj.get("originalFilename"),
                "results": [SingleFileCheckResultResponse.from_dict(_item) for _item in obj["results"]]
                if obj.get("results") is not None
                else None,
            }
        )
        return _obj
