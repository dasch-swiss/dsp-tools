"""
dsp-ingest

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v0.19.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import ClassVar
from typing import Optional
from typing import Self

from pydantic import BaseModel
from pydantic import ConfigDict

from src.dsp_tools.clients.openapi_ingest.openapi_client.models.health import Health
from src.dsp_tools.clients.openapi_ingest.openapi_client.models.status import Status


class Unhealthy(BaseModel):
    """
    Unhealthy
    """

    status: Status
    components: Optional[dict[str, Health]] = None
    __properties: ClassVar[list[str]] = ["status", "components"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Unhealthy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in components (dict)
        _field_dict = {}
        if self.components:
            for _key_components in self.components:
                if self.components[_key_components]:
                    _field_dict[_key_components] = self.components[_key_components].to_dict()
            _dict["components"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Unhealthy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
                "components": dict((_k, Health.from_dict(_v)) for _k, _v in obj["components"].items())
                if obj.get("components") is not None
                else None,
            }
        )
        return _obj
