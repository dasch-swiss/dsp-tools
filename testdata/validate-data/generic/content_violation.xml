<?xml version='1.0' encoding='utf-8'?>

<knora xmlns="https://dasch.swiss/schema"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="https://dasch.swiss/schema ../../../src/dsp_tools/resources/schema/data.xsd"
       shortcode="9999"
       default-ontology="onto">

    <!-- 16 Violations -->

    <!-- label may not be empty -->
    <resource label=" " restype=":ClassWithEverything" id="empty_label"/>

    <!-- label may not contain newlines -->
    <resource label="Start&#10;After Newline" restype=":ClassWithEverything" id="label_with_newline"/>

    <!-- Geoname should be a number -->
    <resource label="Geoname is not a number" restype=":ClassWithEverything" id="geoname_not_number">
        <geoname-prop name=":testGeoname">
            <geoname>this-is-not-a-valid-code</geoname>
        </geoname-prop>
    </resource>

    <!-- attribute 'list' may not be empty -->
    <resource label="List attribute is empty" restype=":ClassWithEverything" id="list_name_attrib_empty">
        <list-prop list="" name=":testListProp">
            <list>n1</list>
        </list-prop>
    </resource>

    <!-- node does not exist -->
    <resource label="List node does not exist" restype=":ClassWithEverything" id="list_node_non_existent">
        <list-prop list="firstList" name=":testListProp">
            <list>other</list>
        </list-prop>
    </resource>

    <!-- node exists but wrong list used -->
    <resource label="List from another list is used" restype=":ClassWithEverything" id="wrong_list_used">
        <list-prop list="secondList" name=":testListProp">
            <list>l2n1</list>
        </list-prop>
    </resource>

    <!-- list does not exist -->
    <resource label="List name does not exist" restype=":ClassWithEverything" id="list_name_non_existent">
        <list-prop list="other" name=":testListProp">
            <list>n1</list>
        </list-prop>
    </resource>

    <!-- Link does not exist -->
    <resource label="Target does not exist" restype=":ClassWithEverything" id="link_target_non_existent">
        <resptr-prop name=":testHasLinkTo">
            <resptr>other</resptr>
        </resptr-prop>
    </resource>

    <!-- Link target is not the range class -->
    <resource label="Link Prop" restype=":ClassWithEverything" id="id_9_target"/>
    <resource label="Target not the right class" restype=":ClassWithEverything" id="link_target_wrong_class">
        <resptr-prop name=":testHasLinkToCardOneResource">
            <resptr>id_9_target</resptr>
        </resptr-prop>
    </resource>

    <!-- Text may not be empty -->
    <resource label="No Content" restype=":ClassWithEverything" id="empty_text_rich">
        <text-prop name=":testRichtext">
            <text encoding="xml"></text>
        </text-prop>
    </resource>

    <!-- Text may not be empty -->
    <resource label="No Content" restype=":ClassWithEverything" id="empty_text_simple">
        <text-prop name=":testTextarea">
            <text encoding="utf8"></text>
        </text-prop>
    </resource>

    <!-- Text may not only consist of whitespace characters -->
    <resource label="Only newline and spaces" restype=":ClassWithEverything" id="text_only_whitespace_simple">
        <text-prop name=":testTextarea">
            <text encoding="utf8">

            </text>
        </text-prop>
    </resource>

    <!-- SimpleText may not have newlines -->
    <resource label="With linebreaks" restype=":ClassWithEverything" id="simple_text_with_newlines">
        <text-prop name=":testSimpleText">
            <text encoding="utf8">
                This may not

                have newlines
            </text>
        </text-prop>
    </resource>

    <!-- The target of the stand-off link does not exist. -->
    <resource label="Richtext" restype=":ClassWithEverything" id="richtext_standoff_link_nonexistent">
        <text-prop name=":testRichtext">
            <text encoding="xml">
                This is a text with <a class="salsah-link" href="IRI:non_existing:IRI">standoff</a>.
            </text>
        </text-prop>
    </resource>

    <!-- Comment on value may not be empty -->
    <resource label="Comment on Value" restype=":ClassWithEverything" id="comment_on_value_empty">
        <uri-prop name=":testUriValue">
            <uri comment="">https://dasch.swiss</uri>
        </uri-prop>
    </resource>

    <!-- Comment on value may not only consist of whitespace characters -->
    <resource label="Comment on Value" restype=":ClassWithEverything" id="comment_on_value_whitespace">
        <uri-prop name=":testUriValue">
            <uri comment="   ">https://dasch.swiss</uri>
        </uri-prop>
    </resource>

    <!-- Date with start later than end date -->

    <resource label="date_range_wrong_year_full_JULIAN" restype=":ClassWithEverything" id="date_range_wrong_year_full_JULIAN">
        <date-prop name=":testSubDate1">
            <date>JULIAN:CE:2000-01-01:CE:1900-01-01</date>
        </date-prop>
    </resource>

    <resource label="date_range_wrong_year_full_GREGORIAN"
              restype=":ClassWithEverything"
              id="date_range_wrong_year_full_GREGORIAN">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:2000-01-01:CE:1900-01-01</date>
        </date-prop>
    </resource>

    <resource label="date_range_wrong_year_full_ISLAMIC" restype=":ClassWithEverything" id="date_range_wrong_year_full_ISLAMIC">
        <date-prop name=":testSubDate1">
            <date>ISLAMIC:2000-01-01:1900-01-01</date>
        </date-prop>
    </resource>

    <resource label="date_range_wrong_yyyy_mm" restype=":ClassWithEverything" id="date_range_wrong_yyyy_mm">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:2000-01:CE:1900-01</date>
        </date-prop>
    </resource>

    <resource
            label="date_range_wrong_year_good_month_wrong"
            restype=":ClassWithEverything"
            id="date_range_wrong_year_good_month_wrong">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:2000-05:CE:2000-01</date>
        </date-prop>
    </resource>

    <resource label="date_range_wrong_year_month_good_day_wrong"
              restype=":ClassWithEverything"
              id="date_range_wrong_year_month_good_day_wrong">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:1800-01-20:CE:1800-01-01</date>
        </date-prop>
    </resource>

    <resource label="date_range_wrong_yyyy" restype=":ClassWithEverything" id="date_range_wrong_yyyy">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:2000:CE:1900</date>
        </date-prop>
    </resource>

    <resource label="date_range_wrong_mixed_precision"
              restype=":ClassWithEverything"
              id="date_range_wrong_mixed_precision">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:2000-01-01:CE:1900</date>
        </date-prop>
    </resource>

    <resource label="date_range_first_is_ce_second_bce"
              restype=":ClassWithEverything"
              id="date_range_first_is_ce_second_bce">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:2000:BCE:1900</date>
        </date-prop>
    </resource>

    <!-- These dates do not exist, it will not be possible to parse them into a correct xsd dataType -->

    <resource label="date_end_month_does_not_exist" restype=":ClassWithEverything" id="date_end_month_does_not_exist">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:1800-01-01:CE:1900-20-01</date>
        </date-prop>
    </resource>

    <resource label="date_end_day_does_not_exist" restype=":ClassWithEverything" id="date_end_day_does_not_exist">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:1800-01-01:CE:1900-01-50</date>
        </date-prop>
    </resource>

    <resource label="date_single_month_does_not_exist" restype=":ClassWithEverything" id="date_single_month_does_not_exist">
        <date-prop name=":testSubDate1">
            <date>GREGORIAN:CE:1800-22</date>
        </date-prop>
    </resource>

</knora>
