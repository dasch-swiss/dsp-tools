<?xml version='1.0' encoding='utf-8'?>

<knora xmlns="https://dasch.swiss/schema"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="https://dasch.swiss/schema ../../../src/dsp_tools/resources/schema/data.xsd"
       shortcode="9999"
       default-ontology="onto">


    <!--
        This file aims to represent every combination of:
            - our error type,
            - the component type of the validation report where the focus node is a resource class,
            - the component type of the sh:detail node, if applicable,
        This should primarily be used to ensure that the user gets the correct message
        when the validation reports gets reformatted.
        It does not aim to represent every validation that can be made.
        For example, it is not an exhaustive list of value type violations
        because they mostly result in the same combination.
    -->


        <!--
        Our Violation Type            ContentRegexViolation
        sh:sourceConstraintComponent  sh:PatternConstraintComponent
        sh:detail                     -
        -->
        <resource label=" " restype=":ClassWithEverything" id="empty_label"/>

        <!--
        Our Violation Type            MaxCardinalityViolation
        sh:sourceConstraintComponent  sh:MaxCountConstraintComponent
        sh:detail                     -
        -->
        <resource label="Decimal Card 0-1" restype=":ClassMixedCard" id="id_max_card">
            <boolean-prop name=":testBoolean">
                <boolean>true</boolean>
            </boolean-prop>
            <resptr-prop name=":testHasLinkToCardOneResource">
                <resptr>id_closed_constraint</resptr>
                <resptr>id_card_one</resptr>
            </resptr-prop>
            <geoname-prop name=":testGeoname">
                <geoname>111111</geoname>
            </geoname-prop>
        </resource>

        <!--
        Our Violation Type            MinCardinalityViolation
        sh:sourceConstraintComponent  sh:MinCountConstraintComponent
        sh:detail                     -
        -->
        <resource label="Bool Card 1" restype=":ClassInheritedCardinalityOverwriting" id="id_card_one"/>

        <!--
        Our Violation Type            FileValueProblem
        sh:sourceConstraintComponent  sh:MinCountConstraintComponent
        sh:detail                     -
        -->
        <resource label="TestMovingImageRepresentation" restype=":TestMovingImageRepresentation" id="id_missing_file_value"/>

        <!--
        Our Violation Type            NonExistentCardinalityViolation
        sh:sourceConstraintComponent  dash:ClosedByTypesConstraintComponent
        sh:detail                     -
        -->
        <resource label="Int card does not exist" restype=":CardOneResource" id="id_closed_constraint">
            <integer-prop name=":testIntegerSimpleText">
                <integer>1</integer>
            </integer-prop>
        </resource>

        <!--
        Our Violation Type            ContentRegexViolation
        sh:sourceConstraintComponent  sh:NodeConstraintComponent
        sh:detail                     sh:PatternConstraintComponent
        -->
        <resource label="Geoname is not a number" restype=":ClassWithEverything" id="geoname_not_number">
            <geoname-prop name=":testGeoname">
                <geoname>this-is-not-a-valid-code</geoname>
            </geoname-prop>
        </resource>

        <!--
        Our Violation Type            ValueTypeViolation
        sh:sourceConstraintComponent  sh:NodeConstraintComponent
        sh:detail                     sh:ClassConstraintComponent
        -->
        <resource label="Uri" restype=":ClassWithEverything" id="id_uri">
            <text-prop name=":testUriValue">
                <text encoding="utf8">https://dasch.swiss</text>
            </text-prop>
        </resource>

        <!--
        Our Violation Type            ValueTypeViolation
        sh:sourceConstraintComponent  sh:NodeConstraintComponent
        sh:detail                     sh:MinCountConstraintComponent
        -->
        <resource label="Simpletext" restype=":ClassWithEverything" id="id_simpletext">
            <text-prop name=":testTextarea">
                <text encoding="xml">Text</text>
            </text-prop>
        </resource>

        <!--
        Our Violation Type            LinkedResourceDoesNotExist
        sh:sourceConstraintComponent  sh:NodeConstraintComponent
        sh:detail                     sh:ClassConstraintComponent
        -->
        <resource label="Target does not exist" restype=":ClassWithEverything" id="link_target_non_existent">
            <resptr-prop name=":testHasLinkTo">
                <resptr>other</resptr>
            </resptr-prop>
        </resource>

        <!--
        Our Violation Type            LinkTargetTypeMismatch
        sh:sourceConstraintComponent  sh:NodeConstraintComponent
        sh:detail                     sh:ClassConstraintComponent
        -->
        <resource label="Link Prop" restype=":ClassWithEverything" id="id_9_target"/>
        <resource label="Target not the right class" restype=":ClassWithEverything" id="link_target_wrong_class">
            <resptr-prop name=":testHasLinkToCardOneResource">
                <resptr>id_9_target</resptr>
            </resptr-prop>
        </resource>

        <!--
        Our Violation Type            DuplicateValueProblem
        sh:sourceConstraintComponent  sh:SPARQLConstraintComponent
        sh:detail                     -
        -->
        <resource label="Duplicate Value: valueAsString" restype=":ClassWithEverything" id="identical_values">
            <text-prop name=":testTextarea">
                <text encoding="utf8">Text</text>
                <text encoding="utf8">Text</text>
            </text-prop>
        </resource>

        <!--
        Our Violation Type            GenericProblem
        sh:sourceConstraintComponent  sh:NodeConstraintComponent
        sh:detail                     sh:InConstraintComponent
        -->
        <resource label="List node does not exist" restype=":ClassWithEverything" id="list_node_non_existent">
            <list-prop list="firstList" name=":testListProp">
                <list>other</list>
            </list-prop>
        </resource>

</knora>
